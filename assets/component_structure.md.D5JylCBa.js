import{_ as n,c as a,o as p,ag as l}from"./chunks/framework.DgsVuIzJ.js";const m=JSON.parse('{"title":"文件结构","description":"","frontmatter":{},"headers":[],"relativePath":"component/structure.md","filePath":"component/structure.md"}'),e={name:"component/structure.md"};function i(c,s,t,o,u,r){return p(),a("div",null,[...s[0]||(s[0]=[l(`<h1 id="文件结构" tabindex="-1">文件结构 <a class="header-anchor" href="#文件结构" aria-label="Permalink to &quot;文件结构&quot;">​</a></h1><p>mings-base-frame 前端基础框架整体结构划分较为清晰，每个目录都有自己需要承担的功能。我们将 src 目录作为项目的根目录，整个基础框架的目录结构如下：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>src</span></span>
<span class="line"><span>|─ apis #接口管理目录</span></span>
<span class="line"><span>│  ├─ api #正式接口请求管理目录</span></span>
<span class="line"><span>│  ├─ mock #模拟接口请求管理目录</span></span>
<span class="line"><span>│  └─ axios.ts #二次封装axios功能文件</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├─ assets #静态资源目录</span></span>
<span class="line"><span>│  ├─ iconfont #字体样式目录</span></span>
<span class="line"><span>│  └─ images #图片目录</span></span>
<span class="line"><span>│     ├─ dark #深色主题的图片目录</span></span>
<span class="line"><span>│     └─ light #浅色主题的图片目录</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├─ components #项目中的全局组件目录</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├─ configs #项目中的配置目录</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├─ hooks #项目中的全局hooks目录</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├─ layouts #应用布局目录，已经封装好了（后台管理应用布局和普通应用布局）</span></span>
<span class="line"><span>│  ├─ AdminLayout.vue #后台管理系统的布局组件</span></span>
<span class="line"><span>│  ├─ BaseLayout.vue #基本布局组件</span></span>
<span class="line"><span>│  ├─ Breadcrumb.vue #面包屑组件</span></span>
<span class="line"><span>│  ├─ HeaderSidebar.vue #头部导航组件</span></span>
<span class="line"><span>│  ├─ IconButton.vue #图标按钮组件</span></span>
<span class="line"><span>│  ├─ Iframe.vue #内嵌页面组件</span></span>
<span class="line"><span>│  ├─ LayoutContent.vue #内容展示组件</span></span>
<span class="line"><span>│  ├─ LayoutHeader.vue #顶栏组件</span></span>
<span class="line"><span>│  ├─ LayoutMenu.vue #菜单组件</span></span>
<span class="line"><span>│  ├─ LayoutSidebar.vue #侧边栏组件</span></span>
<span class="line"><span>│  ├─ LayoutTabbar.vue #标签栏</span></span>
<span class="line"><span>│  ├─ Logo.vue #logo组件</span></span>
<span class="line"><span>│  ├─ MixedHeader.vue #混合菜单组件</span></span>
<span class="line"><span>│  ├─ NormalLayout.vue #普通布局组件</span></span>
<span class="line"><span>│  ├─ SubMenu.vue #子菜单组件</span></span>
<span class="line"><span>│  └─ TabbarTool.vue #标签栏工具组件</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├─ mock #模拟数据目录</span></span>
<span class="line"><span>│  ├─ modules #按功能模块划分的mock接口请求响应的数据目录</span></span>
<span class="line"><span>│  └─ index.ts #封装mockjs功能文件</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├─ pages #页面目录，按照功能模块划分</span></span>
<span class="line"><span>│  └─ cores #应用基础页面目录</span></span>
<span class="line"><span>│     ├─ fallback #各种异常情况的页面目录</span></span>
<span class="line"><span>│     │  ├─ not-found #路由匹配不上页面（找不到页面）</span></span>
<span class="line"><span>│     │  └─ offline #网路异常页面</span></span>
<span class="line"><span>│     ├─ forget-password #忘记密码，重新设置密码页面</span></span>
<span class="line"><span>│     ├─ login #登录页面</span></span>
<span class="line"><span>│     └─ logout #登出页面</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├─ plugins #vue插件目录</span></span>
<span class="line"><span>│  └─ flex.ts #屏幕适配功能插件</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├─ router #路由目录</span></span>
<span class="line"><span>│  ├─ index.ts #路由入口文件</span></span>
<span class="line"><span>│  ├─ guard.ts #路由导航功能文件</span></span>
<span class="line"><span>│  ├─ nprogress.ts #页面切换时进度条展示功能文件</span></span>
<span class="line"><span>│  ├─ utils.ts #路由业务处理时的工具方法</span></span>
<span class="line"><span>│  └─ routes #具体路由文件</span></span>
<span class="line"><span>│     ├─ dynamic.ts #动态路由文件</span></span>
<span class="line"><span>│     ├─ index.ts #所有路由的入口文件</span></span>
<span class="line"><span>│     ├─ not-found.ts #找不到路由文件</span></span>
<span class="line"><span>│     └─ static.ts #静态路由文件</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├─ services #功能服务目录</span></span>
<span class="line"><span>│  ├─ auth.ts #统一登录功能服务</span></span>
<span class="line"><span>│  └─ communication #通信功能目录</span></span>
<span class="line"><span>│     ├─ socket #统一封装websocket功能服务</span></span>
<span class="line"><span>│     ├─ sse #统一封装sse功能服务</span></span>
<span class="line"><span>│     ├─ stomp #统一封装mq功能服务</span></span>
<span class="line"><span>│     ├─ utils #通信功能会用到的公共的工具管理类</span></span>
<span class="line"><span>│     └─ index.ts #通信功能入口文件</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├─ stores pinia数据状态管理目录</span></span>
<span class="line"><span>│  ├─ access #权限相关数据目录</span></span>
<span class="line"><span>│  │  ├─ access.ts #权限数据相关</span></span>
<span class="line"><span>│  │  ├─ auth.ts #用户相关（登录/登出，获取用户信息）</span></span>
<span class="line"><span>│  │  ├─ user.ts #用户相关数据</span></span>
<span class="line"><span>│  │  ├─ types.ts #权限相关数据ts类型</span></span>
<span class="line"><span>│  │  └─ utils.ts #权限相关hook会用到的工具方法</span></span>
<span class="line"><span>│  ├─ configs #应用配置数据目录</span></span>
<span class="line"><span>│  │  ├─ coinfg.ts #配置数据相关hook</span></span>
<span class="line"><span>│  │  ├─ default.ts #默认应用配置数据</span></span>
<span class="line"><span>│  │  └─ types.ts #应用配置数据ts类型</span></span>
<span class="line"><span>│  ├─ modules #应用业务模块相关数据目录</span></span>
<span class="line"><span>│  ├─ index.ts #pinia入口文件</span></span>
<span class="line"><span>│  └─ pinia.ts #创建pinia</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├─ styles #样式目录</span></span>
<span class="line"><span>│  ├─ antd.less #全局修改ant-design-vue组件库样式</span></span>
<span class="line"><span>│  ├─ base.less #项目基础样式，定义的css变量</span></span>
<span class="line"><span>│  ├─ index.less #样式入口文件</span></span>
<span class="line"><span>│  ├─ meui.less #全局修改me-ui组件库样式</span></span>
<span class="line"><span>│  ├─ theme.less #主题样式文件</span></span>
<span class="line"><span>│  └─ transition.less #全局过渡动画样式</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├─ types #ts类型声明文件目录，按照功能模块划分，每个模块创建一个类型声明文件</span></span>
<span class="line"><span>│  ├─ helper.d.ts #自定义可复用的ts类型检测工具</span></span>
<span class="line"><span>│  └─ result.d.ts #接口响应数据类型声明文件</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├─ utils #工具方法目录</span></span>
<span class="line"><span>│  ├─ copy.ts #复制功能</span></span>
<span class="line"><span>│  └─ tree.ts #树操作功能</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├─ App.vue #应用路由页面主入口文件</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├─ main.ts #应用主入口文件</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>└─ vite-env.d.ts #ant-design-vue、me-ui组件库类型声明文件</span></span></code></pre></div>`,3)])])}const v=n(e,[["render",i]]);export{m as __pageData,v as default};
