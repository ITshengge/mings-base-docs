import{_ as e,c as s,o as i,ag as n}from"./chunks/framework.DgsVuIzJ.js";const g=JSON.parse('{"title":"自动生成配置文件","description":"","frontmatter":{},"headers":[],"relativePath":"component/config-gen.md","filePath":"component/config-gen.md"}'),t={name:"component/config-gen.md"};function l(o,a,p,c,d,r){return i(),s("div",null,[...a[0]||(a[0]=[n('<h1 id="自动生成配置文件" tabindex="-1">自动生成配置文件 <a class="header-anchor" href="#自动生成配置文件" aria-label="Permalink to &quot;自动生成配置文件&quot;">​</a></h1><p>mings-base-frame 前端基础框架，在打包的时候，可以自动生成两种配置文件。</p><ul><li>1、项目打包后，我们可以使用命令单独生成项目的配置文件，目的是为了方便在项目部署之后，调试不同配置下的接口或功能，而不需要前端重新修改配置代码，然后再打包。</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span></span></code></pre></div><ul><li>2、项目打包后，我们可以使用命令单独生成项目的常规 nginx 配置文件，后续如果我们需要修改，可以直接在生成的 nginx 配置文件中进行。</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> generate:nginxConfig</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>一定是先打包项目后，再执行命令。</p><p>当我们执行 yarn build 打包项目的时候，同时也会在打包之后，生成项目的配置文件和 nginx 配置文件，不需要我们手动再去执行相关命令。</p></div>',7)])])}const u=e(t,[["render",l]]);export{g as __pageData,u as default};
